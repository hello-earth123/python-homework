# 얕은 복사
print('\n얕은 복사 예시')

# 1차원 리스트에서의 얕은 복사 (리스트 슬라이싱) 리스트 슬라이싱은 할당이랑은 다름 -> 슬라이싱된 값을 반환하여 b에 할당
# 서로 다른 메모리 주소를 가지고 있음 / 서로 다른 객체
a = [1, 2, 3]
b = a[:]

print(a)  # [1, 2, 3]
print(b)  # [1, 2, 3]

# 1차원 리스트에서의 얕은 복사 (copy 메서드)
a = [1, 2, 3]
b = a.copy()

print(a)  # [1, 2, 3]
print(b)  # [1, 2, 3]


# 1차원 리스트에서의 얕은 복사 (list() 함수)
a = [1, 2, 3]
d = list(a)
a[0] = 100

#서로 다른 주소이기 때문에 a를 바꿔도 d는 전혀 지장 없음 / 서로 다른 객체
print(a)  # [100, 2, 3]
print(d)  # [1, 2, 3]


# 얕은 복사의 한계
print('\n다차원 리스트 얕은 복사의 한계')
a = [1, 2, [3, 4, 5]]
b = a[:]


print(a)  # [1, 2, [3, 4, 5]]
print(b)  # [999, 2, [3, 4, 5]]


print(a)  # [1, 2, [3, 100, 5]]
print(b)  # [999, 2, [3, 100, 5]]

print(f'a[2]와 b[2]가 같은 객체인가? {a[2] is b[2]}')  # True
